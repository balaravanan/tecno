import React, { useState, useEffect } from "react";
import { AutoSizer, Table, Column, InfiniteLoader } from "react-virtualized";
// import "../suspend/node_modules/react-virtualized/styles.css";
import { ToastContainer, toast } from "react-toastify";
import {
  CRow,
  CCard,
  CCol,
  CButton,
  CForm,
  CSelect,
  // cRadio,
  // CFormGroup,
  CLabel,
  CInput,
  // CFormText,
} from "@coreui/react";
import Select from "react-select";
import { useFormik } from "formik";
import * as yup from "yup";
// import axios from "axios";
import Edits from "../../images/image 2.svg";
import Remove from "../../images/image 15.svg";
import "./CreateRole.css";
import {
  departmentCreate,
  designationCreate,
  roleCreate,
  getAllDepartment,
  getAllRole,
  getDesignation,
  getOfficeLocation,
  getOfficeType,
  roleDelete,
  updateRole,
} from "../../../services/ApiService";
import { Label } from "react-konva";
import Role from "../role/Role";
// import classes from "*.module.css";
// import { func } from "prop-types";

function Reporting(props) {
  const [areporting, setAreporting] = useState(false);
  const [freporting, setFreporting] = useState(false);
  const [updateId, setUpdateId] = useState("");
  const [officeLocation, setOfficeLocation] = useState([]);
  const [officeType, setOfficeType] = useState([]);
  const [RoleList, setRoleList] = useState([]);
  const [department, setDepartment] = useState([]);
  const [designation, setDesignation] = useState([]);
  // const [aWork, setAWork] = useState(false);
  // const [aAdvance, setAAdvance] = useState(true);
  // const [fWork, setFWork] = useState(false);
  // const [fAdvance, setFAdvance] = useState(true);
  const [functionChange, setFunctionChange] = useState([]);
  const [adminChange, setAdminChange] = useState([]);
  const [departmentShow, setDepartmentShow] = useState(true);
  const [designationShow, setDesignationShow] = useState(true);
  // const [createRoles, setCreateRoles] = useState(false);
  const [view, setView] = useState(true);
  const [dccId, setDccId] = useState({
    officeType: "",
    department: "",
    designation: "",
    location: "",
    code: "",
    aofficeType: "",
    adepartment: "",
    adesignation: "",
    alocation: "",
    acode: "",
  });
  const [triger, setTriger] = useState("");
  const [limit,setLimit] = useState(5);
  const [page,setPage] = useState(1);
  const [paginateData, setPaginateData] = useState({
    totalDocs: 0,
    limit: 0,
    totalPages: 0,
    page: 0,
    pagingCounter: 0,
    hasPrevPage: false,
    hasNextPage: false,
    prevPage: null,
    nextPage: null,
    showing: 0,
  });
  const totalDocs = 10;
  const showing = 10;
  const [departmentData, setDepartmentData] = useState({
    name: "",
    abbreviation: "",
    code: "",
  });
  const [designationData, setDesignationData] = useState({
    name: "",
    abbreviation: "",
    code: "",
  });

  const isRowLoaded = ({ index }) => {
    return !!RoleList[index];
  };

  const loadMoreRows = () => {
    console.log("object");
  };

  const formik = useFormik({
    initialValues: {
      officetype: "",
      departmentRole: "",
      locationRole: "",
      designationRole: "",
      office: "",
      roleName: "",
      abbreviation: "",
      code: "",
      dccDescription: "",
      dccID: "",
    },
    validationSchema: yup.object({
      officetype: yup.string().required("Office Type Required"),
      // .min(5 , "Minimum 5 charcter" )
      departmentRole: yup.string().required("Department Required"),
      locationRole: yup.string().required("Office Location Required"),
      designationRole: yup.string().required("Designation Required"),
      office: yup.string().required("Office Name Required"),
      roleName: yup.string().required("Role Name Required"),
      abbreviation: yup.string().required("Role Abbreviation required"),
      code: yup.string().required("Role Code is required"),
    }),
    onSubmit: (userInputData) => {
      console.log(userInputData);
    },
  });

  const deleteAdmin = (cellData) => {
    let array = functionChange;
    let datas = array.filter((x) => {
      return x._id !== cellData;
    });
    setFunctionChange(datas);
    let data = array.filter((x) => {
      return x._id === cellData;
    });
    setRoleList([...RoleList, data]);
    // console.log(cellData);
  };

  // const enableCreate = async() => {

  // }

  const updatoRole = (row) => {
    setUpdateId(row.rowData._id);
    setView(false);
    formik.values.officetype = row.rowData.typeOfOffice._id;
    formik.values.departmentRole = row.rowData.department._id;
    formik.values.locationRole = row.rowData.officeLocation._id;
    formik.values.designationRole = row.rowData.designation._id;
    formik.values.roleName = row.rowData.roleName;
    formik.values.abbreviation = row.rowData.abbreviation;
    formik.values.code = row.rowData.code;
    formik.values.dccDescription = row.rowData.dccDescription;
    formik.values.dccID = row.rowData.dccId;
    setTriger(row.rowData.department._id);

    if (row.rowData.functionalReporting) {
      row.rowData.functionalReporting.map((x) => {
        x.typeOfOfficeName = x.typeOfOffice.officeType;
        x.departmentName = x.department.name;
        x.locationName = x.officeLocation.area.areaName;
        x.designationName = x.designation.name;
        x.roleName = x.role.roleName;
        return 0;
      });
    }

    if (row.rowData.administativeReporting) {
      let x = row.rowData.administativeReporting;
      x.typeOfOfficeName = x.typeOfOffice.officeType;
      x.departmentName = x.department.name;
      x.locationName = x.officeLocation.area.areaName;
      x.designationName = x.designation.name;
      x.roleName = x.role.roleName;
      row.rowData.administativeReporting = x;
    }

    setFunctionChange(row.rowData.functionalReporting);
    setAdminChange([row.rowData.administativeReporting]);

    let roleLists = RoleList;
    let newRoleLists = roleLists.filter((x) => {
      return x._id !== row.rowData._id;
    });

    setRoleList(newRoleLists);
    // console.log(row.rowData)
  };

  const loadMore = () => {
    if (paginateData.totalDocs !== paginateData.showing) {
      setTimeout(() => {
        actuallyLoadMore();
      }, 500);
    }
  };

  const actuallyLoadMore = async () => {
    try {
      const roleResponse = await getAllRole(
        `page=${paginateData.nextPage}&limit=${paginateData.limit}`
      );
      if (roleResponse) {
        if (roleResponse.data.docs) {
          roleResponse.data.docs.map((x, i) => {
            x.value = x._id;
            x.label = `${x.typeOfOffice.officeType}, ${x.officeLocation.state.stateName}, ${x.officeLocation.city.cityName}, ${x.officeLocation.area.areaName}, ${x.department.name}, ${x.designation.name}, ${x.roleName}`;
            x.typeOfOfficeName = x.typeOfOffice.officeType;
            x.locationName = x.officeLocation.area.areaName;
            x.departmentName = x.department.name;
            x.designationName = x.designation.name;
            console.log(x);
            return 0;
          });
        }
        console.log(roleResponse.data.docs, "roleResponse.data");
        setRoleList(RoleList.concat(roleResponse.data.docs));
        let data = roleResponse.data;
        delete data.docs;
        if (data.hasNextPage === false) {
          setPaginateData({
            ...data,
            showing: data.totalDocs,
          });
        } else {
          setPaginateData({
            ...data,
            showing: (data.nextPage - 1) * data.limit,
          });
        }
      }
    } catch (e) {
      console.log(e);
    }
  };

  const getOfficeLocations = async (id) => {
    let query = `officeType=${id}`;
    try {
      const responseO = await getOfficeLocation(query);

      if (responseO) {
        setOfficeLocation(responseO.OfficeLocation);
      }
    } catch (e) {
      console.log(e);
    }
  };

  useEffect(() => {
    async function getAllOfficeLocation() {
      var responseT, responseL;
      // let body = formik.values
      try {
        responseT = await getOfficeType();

        if (responseT) {
          // setOfficeType(response.OfficeTypes)
          setOfficeType(responseT.OfficeTypes);
        }
      } catch (e) {
        console.log(e);
      }
      try {
        responseL = await getAllDepartment();
        if (responseL) {
          setDepartment(responseL.department);
          console.log(responseL.department);
        }
      } catch (e) {
        console.log(e);
      }
      try {
        const responseL = await getDesignation();
        if (responseL) {
          setDesignation(responseL.data);
          console.log(responseL.data);
        }
      } catch (e) {
        console.log(e);
      }
    }

    getAllOfficeLocation();
  }, []);

  const saveDepartment = async () => {
    try {
      const response = await departmentCreate({
        ...departmentData,
      });
      if (response) {
        let datas = department;
        datas.push(response.data);
        setDepartment(datas);
        setDepartmentData({ name: "", abbreviation: "", code: "" });
        setDepartmentShow(true);
      }
    } catch (e) {
      console.log(e);
    }
  };

  const saveDesignation = async () => {
    try {
      const response = await designationCreate(designationData);
      if (response) {
        let datas = designation;
        datas.push(response.data);
        setDesignation(datas);
        setDesignationData({ name: "", abbreviation: "", code: "" });
        setDesignationShow(true);
      }
    } catch (e) {
      console.log(e);
    }
  };

  const deleteRole = async (e) => {
    try {
      const response = await roleDelete(e);
      if (response) {
        let array = RoleList;
        let data = array.filter((x) => {
          return x._id !== e;
        });
        setRoleList(data);
      }
    } catch (e) {
      console.log(e);
    }
  };

  // useEffect(() => {
  //     async function getAllOfficeType() {
  //         var response
  //         // let body = formik.values
  //     }

  //     getAllOfficeType();
  // }, []);

  const _noContentRenderer = () => {
    return <div>No Office types.</div>;
  };

  const handleOfficeType = (y) => {
    formik.values.officetype = y.target.value;
    officeType.map((x) => {
      if (x._id === y.target.value) {
        setDccId({
          ...dccId,
          officeType: x.code,
          aofficeType: x.abbreviation,
        });
      }
    });
    getOfficeLocations(y.target.value);
    generateId();
  };

  const handleCode = (y) => {
    formik.values.code = y.toUpperCase();
    setDccId({
      ...dccId,
      code: y.toUpperCase(),
    });
    generateId();
  };

  const handleAbbreviation = (y) => {
    formik.values.abbreviation = y;
    setDccId({
      ...dccId,
      acode: y,
    });
    generateId();
  };

  const handleDepartment = (y) => {
    formik.values.departmentRole = y;
    department.map((x) => {
      if (x._id === y) {
        setDccId({
          ...dccId,
          department: x.code,
          adepartment: x.abbreviation,
        });
      }
    });
    generateId();
  };

  const handleDesignation = (y) => {
    formik.values.designationRole = y;
    designation.map((x) => {
      if (x._id === y) {
        setDccId({
          ...dccId,
          designation: x.code,
          adesignation: x.abbreviation,
        });
      }
    });
    generateId();
  };

  const handleLocation = (y) => {
    formik.values.locationRole = y;
    officeLocation.map((x) => {
      if (x._id === y) {
        let code = x.address1.substring(0, 3);
        setDccId({
          ...dccId,
          location: code,
          alocation: x.address1,
        });
      }
    });
    generateId();
  };

  const enableDepartmentCreate = async () => {
    await setDepartmentShow(false);
  };

  const generateId = (y) => {
    if (
      formik.values.abbreviation !== "" &&
      formik.values.code !== "" &&
      formik.values.departmentRole !== "" &&
      formik.values.designationRole !== "" &&
      formik.values.officetype !== "" &&
      formik.values.locationRole !== ""
    ) {
      let str = `${dccId.officeType}${dccId.location}${dccId.department}${dccId.designation}${formik.values.code}`;
      formik.values.dccID = str.trim().toUpperCase();
      formik.values.dccDescription = `${dccId.aofficeType} ${dccId.alocation} ${dccId.adepartment} ${dccId.adesignation} ${formik.values.abbreviation}`;
    }
  };

  const dccIdFunc = (val, field) => {
    if (field === "code") {
    }
    if (field === "abbreviation") {
      setDccId({
        ...dccId,
        acode: val,
      });
    }
  };
  // const capitalize = (x) => {
  //   let s = x.toLowerCase();
  //   if (typeof s !== "string") return "";
  //   return s.charAt(0).toUpperCase() + s.slice(1);
  // };
  useEffect(() => {
    getAllRoles();
  }, []);

  const getAllRoles = async () => {
    try {
      const roleResponse = await getAllRole();
      if (roleResponse) {
        if (roleResponse.data.docs) {
          roleResponse.data.docs.map((x, i) => {
            x.value = x._id;
            x.label = `${x.typeOfOffice.officeType}, ${x.officeLocation.state.stateName}, ${x.officeLocation.city.cityName}, ${x.officeLocation.area.areaName}, ${x.department.name}, ${x.designation.name}, ${x.roleName}`;
            x.typeOfOfficeName = x.typeOfOffice.officeType;
            x.locationName = x.officeLocation.area.areaName;
            x.departmentName = x.department.name;
            x.designationName = x.designation.name;
            console.log(x);
            return 0;
          });
        }
        console.log(roleResponse.data.docs, "roleResponse.data");
        setRoleList(roleResponse.data.docs);
        let data = roleResponse.data;
        delete data.docs;
        setPaginateData(data);
      }
    } catch (e) {
      console.log(e);
    }
  };

  const roleCreation = async () => {
    console.log(updateId);
    if (updateId === "") {
      try {
        const response = await roleCreate(
          formik.values,
          adminChange[0],
          functionChange
        );
        if (response) {
          if (response.data) {
            setView(true);
            setAdminChange([]);
            setFunctionChange([]);
            formik.values.abbreviation = "";
            formik.values.code = "";
            formik.values.dccDescription = "";
            formik.values.dccID = "";
            formik.values.departmentRole = "";
            formik.values.designationRole = "";
            formik.values.locationRole = "";
            formik.values.office = "";
            formik.values.officetype = "";
            formik.values.roleName = "";
          }
        }
      } catch (e) {
        console.log(e);
      }
    } else {
      try {
        const responce = await updateRole(
          formik.values,
          adminChange[0],
          functionChange,
          updateId
        );
        if (responce) {
          if (responce.date) {
            setView(true);
            setAdminChange([]);
            setFunctionChange([]);
            setUpdateId("");
            formik.values.abbreviation = "";
            formik.values.code = "";
            formik.values.dccDescription = "";
            formik.values.dccID = "";
            formik.values.departmentRole = "";
            formik.values.designationRole = "";
            formik.values.locationRole = "";
            formik.values.office = "";
            formik.values.officetype = "";
            formik.values.roleName = "";
          }
        }
      } catch (e) {
        console.log(e);
      }
    }
    getAllRoles();
  };

  const cancel = () => {
    setView(true);
    setDepartmentData({ name: "", abbreviation: "", code: "" });
    setDesignationData({ name: "", abbreviation: "", code: "" });
    formik.values = {
      officetype: "",
      departmentRole: "",
      locationRole: "",
      designationRole: "",
      office: "",
      roleName: "",
      abbreviation: "",
      code: "",
      dccDescription: "",
      dccID: "",
    };
    setAdminChange([]);
    setFunctionChange([]);
  };

  useEffect(() => {
    console.log(view);
  }, [view]);

  // useEffect(() => {
  //   if (dccId.code) {
  //     let fieldsVal = [];
  //     const fields = [
  //       "officeType",
  //       "department",
  //       "designation",
  //       "location",
  //       "code",
  //       "aofficeType",
  //       "adepartment",
  //       "adesignation",
  //       "alocation",
  //       "acode",
  //     ];
  //     fields.map((x) => {
  //       if (dccId[x] === "") {
  //         fieldsVal.push(true);
  //       }
  //     });
  //     if (fieldsVal.length === 0) {
  //       formik.values.dccID = `${dccId.officeType.toUpperCase()}${dccId.location.toUpperCase()}${dccId.department.toUpperCase()}${dccId.designation.toUpperCase()}${dccId.code.toUpperCase()}`;
  //       formik.values.dccDescription = `${dccId.aofficeType} ${dccId.alocation} ${dccId.adepartment} ${dccId.adesignation} ${dccId.acode}`;
  //     }
  //   }
  // });

  return (
    <div>
      {view === false ? (
        <React.Fragment>
          <div style={{ padding: "4%" }}>
            <CCard className={"Roless-card-container-1"}>
              <CRow style={{ paddingTop: "1%", paddingLeft: "2%" }}>
                <CCol md="12" className={"role-heading-1"}>
                  Create Role
                </CCol>
              </CRow>

              <CForm autoComplete="off" onSubmit={formik.handleSubmit}>
                <CRow className={"role-form-container-1"}>
                  <CCol md="12" lg="12" sm="12">
                    <CRow className={"seperator-1"}>
                      <CCol>
                        <CLabel className={"form-labels-1"}>
                          Type of Office
                        </CLabel>
                        <CSelect
                          name={"officetype"}
                          value={formik.values.officetype}
                          onChange={handleOfficeType}
                        >
                          <option value={""} disabled selected>
                            Select Office Type
                          </option>
                          {/* <option name="Head Office" value="Head Office">
                        Head Office
                      </option>
                      <option name="Branch Office" value="Branch Office">
                        Branch Office
                      </option> */}
                          {officeType.map((x) => (
                            <option name="officeType" key={x._id} value={x._id}>
                              {x.officeType}
                            </option>
                          ))}
                        </CSelect>

                        {formik.errors.officetype &&
                        formik.values.officetype === "" ? (
                          <div className="text-danger">
                            {" "}
                            {formik.errors.officetype}
                          </div>
                        ) : null}
                      </CCol>
                      <CCol>
                        {departmentShow ? (
                          <CRow>
                            <CCol md={9}>
                              <CLabel className={"form-labels-1"}>
                                Department
                              </CLabel>
                              <CSelect
                                name={"departmentRole"}
                                value={formik.values.departmentRole}
                                onChange={(e) =>
                                  handleDepartment(e.target.value)
                                }
                              >
                                <option value={""} disabled selected>
                                  Select Department
                                </option>
                                {department.map((x) => (
                                  <option
                                    name="officeType"
                                    key={x._id}
                                    value={x._id}
                                  >
                                    {x.name}
                                  </option>
                                ))}
                              </CSelect>
                              {formik.errors.departmentRole &&
                              formik.values.departmentRole === "" ? (
                                <div className="text-danger">
                                  {" "}
                                  {formik.errors.departmentRole}
                                </div>
                              ) : null}
                            </CCol>
                            <CRow style={{ paddingLeft: "2%" }}>
                              <CCol md={3}>
                                <CButton
                                  shape={"pill"}
                                  className={"saveBtn"}
                                  style={{
                                    marginTop: "30px",
                                    position: "relative",
                                    right: 6,
                                  }}
                                  onClick={enableDepartmentCreate}
                                >
                                  ADD
                                </CButton>
                              </CCol>
                            </CRow>
                          </CRow>
                        ) : (
                          <React.Fragment>
                            <CRow>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Department
                                </CLabel>
                                <CInput
                                  name={"dName"}
                                  value={departmentData.name}
                                  onChange={(e) => {
                                    setDepartmentData({
                                      ...departmentData,
                                      name: e.target.value,
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Abbreviation
                                </CLabel>
                                <CInput
                                  name={"dAbbreviation"}
                                  value={departmentData.abbreviation}
                                  onChange={(e) => {
                                    setDepartmentData({
                                      ...departmentData,
                                      abbreviation: e.target.value,
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Code
                                </CLabel>
                                <CInput
                                  name={"dCode"}
                                  value={departmentData.code}
                                  onChange={(e) => {
                                    setDepartmentData({
                                      ...departmentData,
                                      code: e.target.value,
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CRow>
                                  <CCol md={6}>
                                    <CButton
                                      shape={"pill"}
                                      style={{
                                        marginTop: "30px",
                                        position: "relative",
                                        right: 10,
                                      }}
                                      className={"saveBtn"}
                                      onClick={saveDepartment}
                                    >
                                      Save
                                    </CButton>
                                  </CCol>
                                  <CCol md={6}>
                                    <CButton
                                      shape={"pill"}
                                      className={"cancelBtn"}
                                      style={{
                                        marginTop: "30px",
                                        position: "relative",
                                        left: 20,
                                      }}
                                      onClick={() => {
                                        setDepartmentShow(true);
                                        setDepartmentData({
                                          dName: "",
                                          dCode: "",
                                          dAbbreviation: "",
                                        });
                                      }}
                                    >
                                      Cancel
                                    </CButton>
                                  </CCol>
                                </CRow>
                              </CCol>
                            </CRow>
                          </React.Fragment>
                        )}
                      </CCol>
                    </CRow>

                    <CRow className={"seperator-1"}>
                      <CCol>
                        <CLabel className={"form-labels-1"}>
                          Office Location{" "}
                        </CLabel>
                        <CSelect
                          name={"locationRole"}
                          value={formik.values.locationRole}
                          onChange={(e) => handleLocation(e.target.value)}
                        >
                          <option value={""} disabled selected>
                            Select Office Location
                          </option>
                          {officeLocation.map((x) => (
                            <option name={x.address1} key={x._id} value={x._id}>
                              {x.address1}, {x.address2}, {x.area.areaName}
                            </option>
                          ))}
                        </CSelect>
                        {formik.errors.locationRole &&
                        formik.values.locationRole === "" ? (
                          <div className="text-danger">
                            {" "}
                            {formik.errors.locationRole}
                          </div>
                        ) : null}
                      </CCol>

                      <CCol>
                        {designationShow === true ? (
                          <CRow>
                            <CCol md={9}>
                              <CLabel className={"form-labels-1"}>
                                Designation{" "}
                              </CLabel>
                              <CSelect
                                name={"designationRole"}
                                value={formik.values.designationRole}
                                onChange={(e) =>
                                  handleDesignation(e.target.value)
                                }
                              >
                                <option value={""} disabled selected>
                                  Select Designation
                                </option>
                                {designation.map((x) => (
                                  <option
                                    name="designationRole"
                                    key={x._id}
                                    value={x._id}
                                  >
                                    {x.name}
                                  </option>
                                ))}
                              </CSelect>
                              {formik.errors.designationRole &&
                              formik.values.designationRole === "" ? (
                                <div className="text-danger">
                                  {" "}
                                  {formik.errors.designationRole}
                                </div>
                              ) : null}
                            </CCol>
                            <CCol md={3}>
                              <CButton
                                shape={"pill"}
                                className={"saveBtn"}
                                style={{
                                  marginTop: "30px",
                                  position: "relative",
                                  right: 10,
                                }}
                                onClick={() => {
                                  setDesignationShow(false);
                                }}
                              >
                                ADD
                              </CButton>
                            </CCol>
                          </CRow>
                        ) : (
                          <React.Fragment>
                            <CRow>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Designation
                                </CLabel>
                                <CInput
                                  name={"dName"}
                                  value={designationData.name}
                                  onChange={(e) => {
                                    setDesignationData({
                                      ...designationData,
                                      name: e.target.value,
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Abbreviation
                                </CLabel>
                                <CInput
                                  name={"dAbbreviation"}
                                  value={designationData.abbreviation}
                                  onChange={(e) => {
                                    setDesignationData({
                                      ...designationData,
                                      abbreviation: e.target.value,
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CLabel className={"form-labels-1"}>
                                  Code
                                </CLabel>
                                <CInput
                                  name={"dCode"}
                                  value={designationData.code}
                                  onChange={(e) => {
                                    setDesignationData({
                                      ...designationData,
                                      code: e.target.value.trim(),
                                    });
                                  }}
                                />
                              </CCol>
                              <CCol md={3}>
                                <CRow>
                                  <CCol md={6}>
                                    <CButton
                                      shape={"pill"}
                                      style={{
                                        marginTop: "30px",
                                        position: "relative",
                                        right: 10,
                                      }}
                                      className={"saveBtn"}
                                      onClick={saveDesignation}
                                    >
                                      Save
                                    </CButton>
                                  </CCol>
                                  <CCol md={6}>
                                    <CButton
                                      shape={"pill"}
                                      className={"cancelBtn"}
                                      style={{
                                        marginTop: "30px",
                                        position: "relative",
                                        left: 20,
                                      }}
                                      onClick={() => {
                                        setDesignationShow(true);
                                        setDesignationData({
                                          name: "",
                                          code: "",
                                          abbreviation: "",
                                        });
                                      }}
                                    >
                                      Cancel
                                    </CButton>
                                  </CCol>
                                </CRow>
                              </CCol>
                            </CRow>
                          </React.Fragment>
                        )}
                      </CCol>
                    </CRow>

                    <CRow className={"seperator-1"}>
                      <CCol>
                        <CLabel className={"form-labels-1"}>Role Name</CLabel>
                        <CInput
                          name={"roleName"}
                          onChange={formik.handleChange}
                          value={formik.values.roleName}
                        />
                        {formik.errors.roleName &&
                        formik.values.roleName === "" ? (
                          <div className="text-danger">
                            {" "}
                            {formik.errors.roleName}
                          </div>
                        ) : null}
                      </CCol>
                      <CCol>
                        <CLabel className={"form-labels-1"}>
                          Abbreviation
                        </CLabel>
                        <CInput
                          name={"abbreviation"}
                          onChange={(e) => handleAbbreviation(e.target.value)}
                          value={formik.values.abbreviation}
                        />
                        {formik.errors.abbreviation &&
                        formik.values.abbreviation === "" ? (
                          <div className="text-danger">
                            {" "}
                            {formik.errors.abbreviation}
                          </div>
                        ) : null}
                      </CCol>
                      <CCol>
                        <CLabel className={"form-labels-1"}>Code</CLabel>
                        <CInput
                          name={"code"}
                          onChange={(e) => handleCode(e.target.value)}
                          value={formik.values.code}
                        />
                        {formik.errors.code && formik.values.code === "" ? (
                          <div className="text-danger">
                            {" "}
                            {formik.errors.code}
                          </div>
                        ) : null}
                      </CCol>
                    </CRow>
                    <CRow className={"seperator-1"}>
                      {/* <CCol lg={1}></CCol> */}
                      <CCol lg={2}>
                        <CLabel
                          style={{
                            position: "relative",
                            top: "5px",
                            float: "right",
                          }}
                          className={"form-labels-1"}
                        >
                          D.C.C Description
                        </CLabel>
                      </CCol>
                      <CCol lg={9}>
                        <CInput
                          name={"dccDescription"}
                          value={formik.values.dccDescription}
                          onChange={formik.handleChange}
                        />
                      </CCol>
                      <CCol lg={1}></CCol>
                    </CRow>
                    <CRow className={"seperator-1"}>
                      {/* <CCol lg={1}></CCol> */}
                      <CCol lg={2}>
                        <CLabel
                          style={{
                            position: "relative",
                            top: "5px",
                            float: "right",
                          }}
                          className={"form-labels-1"}
                        >
                          D.C.C ID
                        </CLabel>
                      </CCol>
                      <CCol lg={9}>
                        <CInput name={"dccID"} value={formik.values.dccID} />
                      </CCol>
                      <CCol lg={1}></CCol>
                    </CRow>

                    <CCol md="10"></CCol>
                  </CCol>
                </CRow>
                {/* 
                        <CRow  >
                            <div class="centerd-1">
                                <CCol md='12'><CButton shape={'pill'} className={'btnShadow blueColor-btn'} onClick={formik.handleSubmit}>+ Create</CButton></CCol>
                            </div>
                        </CRow> */}
              </CForm>
            </CCard>
          </div>
          <div>
            <CRow>
              <CCol lg={"4"}>
                <span
                  style={{
                    paddingLeft: "40px",
                    fontSize: "16px",
                    fontWeight: "bold",
                  }}
                >
                  IS HIERARACHY REPORTING IS REQUIRED ?
                </span>
              </CCol>
              <CCol lg={1}>
                <span>
                  <CInput
                    onClick={() => {
                      setAreporting(true);
                    }}
                    checked={areporting}
                    style={{ width: "15px", height: "15px" }}
                    name="administrativeReporting"
                    type={"radio"}
                    label="yes"
                  />
                  <CLabel
                    style={{
                      position: "relative",
                      left: "30px",
                      bottom: "20px",
                      fontSize: "16px",
                    }}
                  >
                    Yes
                  </CLabel>
                </span>
              </CCol>
              <CCol lg={1}>
                <CInput
                  onClick={() => {
                    setAreporting(false);
                  }}
                  checked={!areporting}
                  style={{ width: "15px", height: "15px" }}
                  name="administrativeReporting"
                  type={"radio"}
                />
                <CLabel
                  style={{
                    position: "relative",
                    left: "30px",
                    bottom: "20px",
                    fontSize: "16px",
                  }}
                >
                  No
                </CLabel>
              </CCol>
            </CRow>
          </div>

          <CRow style={{ paddingTop: "-17%", marginTop: "100px" }}>
            {areporting && (
              <CCol>
                <div>
                  <CCard className={"Administrative-card-container"}>
                    <CRow style={{ paddingTop: "2%", paddingLeft: "2%" }}>
                      <CCol md="12" className={"role-heading-1"}>
                        Administrative Reporting{" "}
                      </CCol>
                    </CRow>
                    <CRow
                      style={{
                        paddingTop: "10px",
                        paddingLeft: "2%",
                        paddingBottom: "10px",
                      }}
                    >
                      <CCol lg={6}>
                        <Label
                          style={{ fontSize: "16px", marginTop: "10px" }}
                          className={"role-heading-1"}
                        >
                          {" "}
                          Word Search
                        </Label>
                        <Select
                          onChange={(e) => {
                            let array = adminChange;
                            RoleList.map((x) => {
                              if (x._id !== e._id) {
                                array.push(x);
                              }
                              return 0;
                            });
                            setRoleList(array);
                            setAdminChange([e]);
                          }}
                          options={RoleList}
                        />
                      </CCol>
                    </CRow>

                    <CRow style={{ padding: "2%" }}>
                      <CCol md="12">
                        <div style={{ width: "100%", height: "110px" }}>
                          <AutoSizer>
                            {({ width, height }) => {
                              return (
                                <Table
                                  headerStyle={{ textTransform: "capitalize" }}
                                  rowStyle={{
                                    borderBottom: "1px solid lightgrey",
                                  }}
                                  width={width}
                                  height={height}
                                  headerHeight={50}
                                  rowHeight={50}
                                  rowCount={adminChange.length}
                                  //    sort={_sort}
                                  //    sortBy={sortBy}
                                  overscanColumnCount={1}
                                  overscanRowCount={1}
                                  noContentRenderer={_noContentRenderer}
                                  //    sortDirection={sortDirection}
                                  rowGetter={({ index }) => adminChange[index]}
                                >
                                  <Column
                                    dataKey={"typeOfOfficeName"}
                                    label={"Type of Office"}
                                    width={200}
                                  />
                                  <Column
                                    dataKey={"departmentName"}
                                    label={"Department"}
                                    width={150}
                                  />
                                  <Column
                                    dataKey={"locationName"}
                                    label={"Office Location"}
                                    width={200}
                                  />
                                  <Column
                                    dataKey={"designationName"}
                                    label={"Designation"}
                                    width={210}
                                  />
                                  <Column
                                    dataKey={"roleName"}
                                    label={"Role"}
                                    width={120}
                                  />

                                  <Column
                                    dataKey={"_id"}
                                    label={"Actions"}
                                    cellRenderer={(row) => (
                                      <CRow>
                                        <CCol md="12">
                                          <i
                                            onClick={() => {
                                              setAdminChange([]);
                                              setRoleList([
                                                ...RoleList,
                                                ...adminChange,
                                              ]);
                                            }}
                                            class="fas fa-2x fa-times-circle indicator"
                                            style={{
                                              marginLeft: "12px",
                                            }}
                                          ></i>
                                        </CCol>
                                      </CRow>
                                    )}
                                    width={100}
                                  />
                                </Table>
                              );
                            }}
                          </AutoSizer>
                        </div>
                      </CCol>
                    </CRow>
                    <CRow
                      style={{
                        padding: "2%",
                        paddingLeft: "5%",
                        paddingTop: "0%",
                        paddingRight: "5%",
                      }}
                    ></CRow>
                    <CRow
                      style={{
                        padding: "2%",
                        paddingLeft: "5%",
                        paddingTop: "0%",
                        paddingRight: "5%",
                      }}
                    >
                      <CCol md="9"></CCol>
                      {/* <CCol md='3'><CButton shape={'pill'} className={'btnShadow blueColor-btn'} onClick={enableCreate}>+ Create Reporting</CButton></CCol> */}
                    </CRow>
                  </CCard>
                </div>
              </CCol>
            )}
          </CRow>
          <CRow style={{ marginBottom: "60px" }}>
            <CCol lg={"4"}>
              <span
                style={{
                  paddingLeft: "40px",
                  fontSize: "16px",
                  fontWeight: "bold",
                }}
              >
                IS FUNCTIONAL REPORTING IS REQUIRED ?
              </span>
            </CCol>
            <CCol lg={1}>
              <span>
                <CInput
                  onClick={() => {
                    setFreporting(true);
                  }}
                  checked={freporting}
                  style={{ width: "15px", height: "15px" }}
                  name="functionalReporting"
                  type={"radio"}
                  label="yes"
                />
                <CLabel
                  style={{
                    position: "relative",
                    left: "30px",
                    bottom: "20px",
                    fontSize: "16px",
                  }}
                >
                  Yes
                </CLabel>
              </span>
            </CCol>
            <CCol lg={1}>
              <CInput
                onClick={() => {
                  setFreporting(false);
                }}
                checked={!freporting}
                style={{ width: "15px", height: "15px" }}
                name="functionalReporting"
                type={"radio"}
              />
              <CLabel
                style={{
                  position: "relative",
                  left: "30px",
                  bottom: "20px",
                  fontSize: "16px",
                }}
              >
                No
              </CLabel>
            </CCol>
          </CRow>
          {freporting && (
            <CRow>
              <CCol>
                <CCard className={"functional-card-container"}>
                  <CRow style={{ paddingTop: "2%", paddingLeft: "2%" }}>
                    <CCol md="12" className={"role-heading-1"}>
                      Functional Reporting
                    </CCol>
                  </CRow>
                  <CRow
                    style={{
                      paddingTop: "10px",
                      paddingLeft: "2%",
                      paddingBottom: "10px",
                    }}
                  >
                    <CCol lg={6}>
                      <Label
                        style={{ fontSize: "16px", marginTop: "10px" }}
                        className={"role-heading-1"}
                      >
                        {" "}
                        Word Search
                      </Label>
                      <Select
                        onChange={(e) => {
                          let data = functionChange.filter((x) => {
                            return x.role === e._id;
                          });
                          let datas = RoleList.filter((x) => {
                            return x._id !== e._id;
                          });
                          setRoleList(datas);
                          if (!data) {
                            setFunctionChange([...functionChange, e]);
                          }
                        }}
                        options={RoleList}
                      />
                    </CCol>
                  </CRow>

                  <CRow style={{ padding: "2%" }}>
                    <CCol md="12">
                      <div style={{ width: "100%", height: "200px" }}>
                        <AutoSizer>
                          {({ width, height }) => {
                            return (
                              <Table
                                headerStyle={{ textTransform: "capitalize" }}
                                rowStyle={{
                                  borderBottom: "1px solid lightgrey",
                                }}
                                width={width}
                                height={height}
                                headerHeight={50}
                                rowHeight={50}
                                rowCount={functionChange.length}
                                //    sort={_sort}
                                //    sortBy={sortBy}
                                overscanColumnCount={1}
                                overscanRowCount={1}
                                noContentRenderer={_noContentRenderer}
                                //    sortDirection={sortDirection}
                                rowGetter={({ index }) => functionChange[index]}
                              >
                                <Column
                                  dataKey={"typeOfOfficeName"}
                                  label={"OfficeType"}
                                  width={110}
                                />
                                <Column
                                  dataKey={"locationName"}
                                  label={"Location"}
                                  width={150}
                                />
                                <Column
                                  dataKey={"departmentName"}
                                  label={"Department"}
                                  width={160}
                                />
                                <Column
                                  dataKey={"designationName"}
                                  label={"Designation"}
                                  width={170}
                                />
                                <Column
                                  dataKey={"roleName"}
                                  label={"Role"}
                                  width={200}
                                />
                                <Column
                                  dataKey={"_id"}
                                  label={"Actions"}
                                  cellRenderer={(row) => (
                                    <CRow>
                                      {/* <CCol md="5">
                                    <img
                                      className={"icon-role-list"}
                                      src={Edit}
                                    />
                                  </CCol> */}
                                      <CCol md="5">
                                        <i
                                          onClick={() => {
                                            deleteAdmin(row.cellData);
                                          }}
                                          class="fas fa-2x fa-times-circle indicator"
                                          style={{
                                            marginLeft: "12px",
                                          }}
                                        ></i>
                                      </CCol>
                                    </CRow>
                                  )}
                                  width={100}
                                />
                              </Table>
                            );
                          }}
                        </AutoSizer>
                      </div>
                    </CCol>
                  </CRow>

                  <CRow>
                    <CCol md="8"></CCol>
                    <CCol md="4" style={{ paddingLeft: "14%" }}>
                      <CCard
                        style={{
                          width: "165px",
                          height: "35px",
                          padding: "3%",
                          textAlign: "center",
                        }}
                        className={"Role-card-container"}
                      >
                        Showing 1-10 of 100
                      </CCard>
                    </CCol>
                  </CRow>
                </CCard>
              </CCol>
            </CRow>
          )}
          <CRow style={{ marginTop: "60px" }}>
            <div class="add">
              <CCol md="12">
                <CButton
                  shape={"pill"}
                  className={"saveBtn"}
                  onClick={roleCreation}
                >
                  Save
                </CButton>
              </CCol>
            </div>
          </CRow>
          <CRow style={{ paddingLeft: "85%" }}>
            <div class="adds">
              <CCol md="12">
                <CButton
                  shape={"pill"}
                  className={"cancelBtn"}
                  onClick={cancel}
                >
                  {" "}
                  Back
                </CButton>
              </CCol>
            </div>
          </CRow>
          <ToastContainer
            className="toast--warning   "
            style={{ width: "300px" }}
          />
        </React.Fragment>
      ) : (
        <React.Fragment>
          <CCard className={"EducationDetail-card-container"}>
            <CRow style={{ paddingTop: "2%", paddingLeft: "1%" }}>
              <CCol md="12" className={"educationdetail-heading"}>
                Roles
              </CCol>
            </CRow>
            <CRow style={{ padding: "15px", paddingRight: "92%" }}>
              <CCol md="12">
                <CButton
                  color={"primary"}
                  shape={"pill"}
                  className={"saveBtn"}
                  style={{ position: "relative", right: "5px" }}
                  onClick={() => {
                    setView(false);
                  }}
                >
                  + ADD
                </CButton>
              </CCol>
            </CRow>
            <CRow style={{ padding: "1%" }}>
              <CCol md="12">
                <div className="container">
                  <React.Fragment>
                    <CRow
                      style={{
                        paddingTop: "3%",
                        paddingLeft: "3%",
                        width: "max-content",
                      }}
                    >
                      <CCol md="12">
                        <CRow>
                          <CCol md="2">
                            <CInput
                              className={"box"}
                              type={"text"}
                              name={"OfficeTypes"}
                              placeholder="Filter Type"
                            />
                            {/* {searchResults.map(item => (
                                    <li>{item}</li>
                                ))} */}
                          </CCol>
                          <CCol md="2">
                            <CInput
                              className={"box"}
                              type={"text"}
                              name={"Abbreviation"}
                              placeholder="Filter Abbreviation"
                            />
                          </CCol>
                          <CCol md="2">
                            <CInput
                              className={"box"}
                              type={"text"}
                              name={"ReportingTo"}
                              placeholder="Filter Reporting "
                            />
                          </CCol>
                        </CRow>
                      </CCol>
                    </CRow>
                  </React.Fragment>
                  <InfiniteLoader
                    isRowLoaded={({ index }) => !!RoleList[index]}
                    loadMoreRows={loadMore}
                    rowCount={1000000}
                  >
                    {({ onRowsRendered, registerChild }) => (
                      <AutoSizer>
                        {({ width, height }) => (
                          <Table
                            ref={registerChild}
                            onRowsRendered={onRowsRendered}
                            rowClassName="table-row"
                            headerStyle={{
                              textTransform: "capitalize",
                            }}
                            rowStyle={{
                              borderBottom: "1px solid lightgrey",
                            }}
                            width={width}
                            height={height > 300 ? height : 300}
                            headerHeight={50}
                            rowHeight={50}
                            rowCount={RoleList.length}
                            //    sort={_sort}
                            //    sortBy={sortBy}
                            overscanColumnCount={1}
                            overscanRowCount={1}
                            noContentRenderer={_noContentRenderer}
                            //    sortDirection={sortDirection}
                            rowGetter={({ index }) => RoleList[index]}
                          >
                            <Column
                              dataKey={"typeOfOfficeName"}
                              label={"OfficeType"}
                              width={240}
                            />
                            <Column
                              dataKey={"locationName"}
                              label={"Location"}
                              width={240}
                            />
                            <Column
                              dataKey={"departmentName"}
                              label={"Department"}
                              width={240}
                            />
                            <Column
                              dataKey={"designationName"}
                              label={"Designation"}
                              width={240}
                            />
                            <Column
                              dataKey={"roleName"}
                              label={"Role"}
                              width={240}
                            />
                            <Column
                              dataKey={"_id"}
                              label={"Actions"}
                              width={100}
                              cellRenderer={(row) => (
                                <CRow>
                                  <CCol style={{ fontSize: "1.15rem" }} md="12">
                                    <i
                                      style={{
                                        marginRight: "5px",
                                      }}
                                      onClick={() => updatoRole(row)}
                                      class="fas fa-edit indicator1"
                                    ></i>
                                    <i
                                      onClick={() => {
                                        deleteRole(row.rowData._id);
                                      }}
                                      style={{
                                        marginLeft: "5px",
                                      }}
                                      class="fas fa-trash indicator"
                                    ></i>
                                  </CCol>
                                </CRow>
                              )}
                            />
                          </Table>
                        )}
                      </AutoSizer>
                    )}
                  </InfiniteLoader>
                </div>
              </CCol>
            </CRow>
            <CRow>
              <CCol md={10}></CCol>
              <CCol md="2">
                <div
                  className="centerd-2"
                  style={{padding: "3%",position:'relative',top:"320px",right:"20px"}}
                >
                  <CCard
                    style={{
                      padding: "1px 20px",
                      textAlign: "center",
                      borderRadius: "25px",
                    }}
                    className={"float-right"}
                  >
                    Showing 1-{paginateData.showing} of {paginateData.totalDocs}
                  </CCard>
                </div>
              </CCol>
            </CRow>
          </CCard>
        </React.Fragment>
      )}
    </div>
  );
}

export default Reporting;

// db.createView("treeView", "hierachy", [
//   {
//    $graphLookup: {
//       from: "hierachy",
//       startWith: "$nodeId",
//       connectFromField: "nodeId",
//       connectToField: "parentId",
//       maxDepth: 0,
//       as: "children"
//    }
//   }
//   ]);
