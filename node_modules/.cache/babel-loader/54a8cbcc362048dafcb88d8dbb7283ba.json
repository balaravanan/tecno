{"ast":null,"code":"import _regeneratorRuntime from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/kpost/Desktop/Political_UI/src/views/components/office/OfficeLocationUpload.jsx\";\n\nimport { getArea, getAreaSchema, getOfficeLocation, getOfficeType, locationUpload } from \"../../../services/ApiService\";\nimport { ExportCSV } from \"../BulkUpload/ExportCSV.jsx\";\nimport { CCol, CInput, CLabel, CRow, CButton } from \"@coreui/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport * as XLSX from \"xlsx\";\nimport \"./Office.css\";\nimport readXlsxFile from \"read-excel-file\";\n\nvar OfficeLocationUpload = function OfficeLocationUpload() {\n  var reader = new FileReader();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      area = _useState2[0],\n      setArea = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaData = _useState4[0],\n      setAreaData = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      files = _useState6[0],\n      setFiles = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fileName = _useState8[0],\n      setFileName = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selected = _useState10[0],\n      setSelected = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      customers = _useState12[0],\n      setCustomers = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      excelDatas = _useState14[0],\n      setExcelDatas = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      officeTypes = _useState16[0],\n      setOfficeTypes = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      invalidData = _useState18[0],\n      setInvalidData = _useState18[1];\n\n  var _useState19 = useState({\n    officeType: \"\",\n    code: \"\",\n    id: \"\"\n  }),\n      _useState20 = _slicedToArray(_useState19, 2),\n      officeTypeDetails = _useState20[0],\n      setOfficeTypeDetails = _useState20[1];\n\n  useEffect(function () {\n    getAllOfficeTypes();\n  }, []);\n  useEffect(function () {\n    var f = files;\n\n    if (f.name) {\n      readXlsxFile(f).then(function (rows) {\n        setOfficeTypeDetails({\n          officeType: rows[2][1],\n          code: rows[3][1],\n          id: rows[4][1]\n        });\n        var keys = rows[5];\n\n        for (var i = 0; i <= 5; i++) {\n          rows.shift();\n        }\n\n        if (rows.length > 0) {\n          var datas = [];\n          var data = {};\n          rows.map(function (x, j) {\n            x.map(function (y, i) {\n              data[keys[i]] = y;\n            });\n            data.sNo = j + 1;\n            datas.push(data);\n          });\n          setExcelDatas(datas);\n        }\n      });\n    }\n  }, [files]);\n\n  var uploadBulk = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(excelDatas.length > 0)) {\n                _context.next = 12;\n                break;\n              }\n\n              data = {\n                OfficeId: officeTypeDetails.id,\n                data: excelDatas\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return locationUpload(data);\n\n            case 5:\n              response = _context.sent;\n\n              if (response) {\n                if (response.data) {\n                  setInvalidData(response.inValidData);\n                }\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 9]]);\n    }));\n\n    return function uploadBulk() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getAllOfficeTypes = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, _response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return getOfficeType();\n\n            case 3:\n              response = _context2.sent;\n\n              if (response) {\n                if (response.OfficeTypes) {\n                  response.OfficeTypes.map(function (x) {\n                    x.value = x._id;\n                    x.label = x.officeType;\n                  });\n                  setOfficeTypes(response.OfficeTypes);\n                }\n              }\n\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n              _context2.prev = 10;\n              _context2.next = 13;\n              return getAreaSchema();\n\n            case 13:\n              _response = _context2.sent;\n\n              if (_response) {\n                if (_response.Area) {\n                  setArea(_response.Area);\n                }\n              }\n\n              _context2.next = 20;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t1 = _context2[\"catch\"](10);\n              console.log(_context2.t1);\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7], [10, 17]]);\n    }));\n\n    return function getAllOfficeTypes() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var data = [[], [\"OfficeType\", selected.officeType], [\"officeCode\", selected.code], [\"officeId\", selected._id], []];\n    var custs = [[\"Property\", \"Value\"]].concat(data, [[\"Address_1\", \"Address_2\", \"Area_Id\", \"Area_Name\", \"Pincode\"]]);\n    var data2 = [[\"Area Details\"], [\"S.No\", \"Country Name\", \"State Name\", \"City Name\", \"Area Name\", \"Pincode\", \"\", \"Area Id\"], []];\n    area.map(function (x, i) {\n      console.log(i, \"iiiiiiiii\");\n      data2.push([i + 1, x.country.countryName, x.state.stateName, x.city.cityName, x.areaName, x.pincode, \"\", x._id]);\n    });\n    setCustomers(custs);\n    setAreaData(data2);\n    setFileName(\"OfficeLocation\");\n  }, [selected]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"OfficeLocationUpload\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    className: \"role-heading-6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, \"Party Office Location Bulk Upload\")), /*#__PURE__*/React.createElement(CRow, {\n    style: {\n      marginTop: \"40px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: 5,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CLabel, {\n    className: \"form-labels-6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"Office Types\"), /*#__PURE__*/React.createElement(Select, {\n    options: officeTypes,\n    onChange: function onChange(e) {\n      setSelected(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(CRow, {\n    style: {\n      marginTop: \"40px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: \"6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ExportCSV, {\n    csvData: [customers, areaData],\n    fileName: fileName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(CCol, {\n    md: \"6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    onClick: function onClick() {\n      document.getElementById(\"uploadTemplate\").click();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontSize: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fas fa-upload\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(CCol, {\n    md: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CLabel, {\n    style: {\n      position: \"relative\",\n      right: \"25px\",\n      top: \"5px\"\n    },\n    className: \"form-labels-6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, \"Upload Template\"), /*#__PURE__*/React.createElement(CInput, {\n    id: \"uploadTemplate\",\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    onChange: function onChange(e) {\n      setFiles(e.target.files[0]);\n    },\n    accept: \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(CRow, {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CCol, {\n    md: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CButton, {\n    onClick: uploadBulk,\n    className: \"saveBtn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, \"Confirm\"))));\n};\n\nexport default OfficeLocationUpload;","map":{"version":3,"sources":["/home/kpost/Desktop/Political_UI/src/views/components/office/OfficeLocationUpload.jsx"],"names":["getArea","getAreaSchema","getOfficeLocation","getOfficeType","locationUpload","ExportCSV","CCol","CInput","CLabel","CRow","CButton","React","useState","useEffect","Select","XLSX","readXlsxFile","OfficeLocationUpload","reader","FileReader","area","setArea","areaData","setAreaData","files","setFiles","fileName","setFileName","selected","setSelected","customers","setCustomers","excelDatas","setExcelDatas","officeTypes","setOfficeTypes","invalidData","setInvalidData","officeType","code","id","officeTypeDetails","setOfficeTypeDetails","getAllOfficeTypes","f","name","then","rows","keys","i","shift","length","datas","data","map","x","j","y","sNo","push","uploadBulk","OfficeId","response","inValidData","console","log","OfficeTypes","value","_id","label","Area","custs","data2","country","countryName","state","stateName","city","cityName","areaName","pincode","marginTop","e","document","getElementById","click","fontSize","position","right","top","display","target","paddingTop"],"mappings":"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","sourcesContent":["import {\n  getArea,\n  getAreaSchema,\n  getOfficeLocation,\n  getOfficeType,\n  locationUpload,\n} from \"../../../services/ApiService\";\nimport { ExportCSV } from \"../BulkUpload/ExportCSV.jsx\";\nimport { CCol, CInput, CLabel, CRow,CButton } from \"@coreui/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport * as XLSX from \"xlsx\";\nimport \"./Office.css\";\nimport readXlsxFile from \"read-excel-file\";\n\nconst OfficeLocationUpload = () => {\n  const reader = new FileReader();\n  const [area, setArea] = useState([]);\n  const [areaData, setAreaData] = useState([]);\n  const [files, setFiles] = useState({});\n  const [fileName, setFileName] = useState(\"\");\n  const [selected, setSelected] = useState({});\n  const [customers, setCustomers] = useState([]);\n  const [excelDatas, setExcelDatas] = useState([]);\n  const [officeTypes, setOfficeTypes] = useState([]);\n  const [invalidData, setInvalidData] = useState([]);\n  const [officeTypeDetails, setOfficeTypeDetails] = useState({\n    officeType: \"\",\n    code: \"\",\n    id: \"\",\n  });\n\n  useEffect(() => {\n    getAllOfficeTypes();\n  }, []);\n\n  useEffect(() => {\n    var f = files;\n    if (f.name) {\n      readXlsxFile(f).then((rows) => {\n        setOfficeTypeDetails({\n          officeType: rows[2][1],\n          code: rows[3][1],\n          id: rows[4][1],\n        });\n        let keys = rows[5];\n        for (var i = 0; i <= 5; i++) {\n          rows.shift();\n        }\n        if (rows.length > 0) {\n          let datas = [];\n          let data = {};\n          rows.map((x, j) => {\n            x.map((y, i) => {\n              data[keys[i]] = y;\n            });\n            data.sNo = j + 1;\n            datas.push(data);\n          });\n          setExcelDatas(datas);\n        }\n      });\n    }\n  }, [files]);\n\n  const uploadBulk = async () => {\n    if (excelDatas.length > 0) {\n      let data = {\n        OfficeId: officeTypeDetails.id,\n        data: excelDatas,\n      };\n      try {\n        const response = await locationUpload(data);\n        if (response) {\n          if (response.data) {\n            setInvalidData(response.inValidData);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const getAllOfficeTypes = async () => {\n    try {\n      const response = await getOfficeType();\n      if (response) {\n        if (response.OfficeTypes) {\n          response.OfficeTypes.map((x) => {\n            x.value = x._id;\n            x.label = x.officeType;\n          });\n          setOfficeTypes(response.OfficeTypes);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n\n    try {\n      const response = await getAreaSchema();\n      if (response) {\n        if (response.Area) {\n          setArea(response.Area);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    let data = [\n      [],\n      [\"OfficeType\", selected.officeType],\n      [\"officeCode\", selected.code],\n      [\"officeId\", selected._id],\n      [],\n    ];\n    let custs = [\n      [\"Property\", \"Value\"],\n      ...data,\n      [\"Address_1\", \"Address_2\", \"Area_Id\", \"Area_Name\", \"Pincode\"],\n    ];\n\n    let data2 = [\n      [\"Area Details\"],\n      [\n        \"S.No\",\n        \"Country Name\",\n        \"State Name\",\n        \"City Name\",\n        \"Area Name\",\n        \"Pincode\",\n        \"\",\n        \"Area Id\",\n      ],\n      [],\n    ];\n\n    area.map((x, i) => {\n      console.log(i, \"iiiiiiiii\");\n      data2.push([\n        i + 1,\n        x.country.countryName,\n        x.state.stateName,\n        x.city.cityName,\n        x.areaName,\n        x.pincode,\n        \"\",\n        x._id,\n      ]);\n    });\n\n    setCustomers(custs);\n    setAreaData(data2);\n    setFileName(\"OfficeLocation\");\n  }, [selected]);\n\n  return (\n    <div className=\"OfficeLocationUpload\">\n      <CRow>\n        <CCol className={\"role-heading-6\"}>Party Office Location Bulk Upload</CCol>\n      </CRow>\n      <CRow style={{ marginTop: \"40px\" }}>\n        <CCol md={5}>\n          <CLabel className={\"form-labels-6\"}>Office Types</CLabel>\n          <Select\n            options={officeTypes}\n            onChange={(e) => {\n              setSelected(e);\n            }}\n          />\n        </CCol>\n      </CRow>\n      <CRow style={{ marginTop: \"40px\" }}>\n        <CCol md={\"6\"}>\n          <CRow>\n            <CCol md={12}>\n              <ExportCSV csvData={[customers, areaData]} fileName={fileName} />\n            </CCol>\n          </CRow>\n        </CCol>\n        <CCol md={\"6\"}>\n          <CRow\n            onClick={() => {\n              document.getElementById(\"uploadTemplate\").click();\n            }}\n          >\n            <CCol md={1}>\n              <span style={{ fontSize: \"20px\" }}>\n                <i class=\"fas fa-upload\"></i>\n              </span>\n            </CCol>\n            <CCol md={6}>\n              <CLabel\n                style={{ position: \"relative\", right: \"25px\", top: \"5px\" }}\n                className={\"form-labels-6\"}\n              >\n                Upload Template\n              </CLabel>\n              <CInput\n                id={\"uploadTemplate\"}\n                style={{ display: \"none\" }}\n                type={\"file\"}\n                onChange={(e) => {\n                  setFiles(e.target.files[0]);\n                }}\n                accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n              />\n            </CCol>\n          </CRow>\n        </CCol>\n      </CRow>\n      <CRow style={{ paddingTop: \"50px\" }}>\n        <CCol md={6}></CCol>\n        <CCol md={6}>\n          <CButton onClick={uploadBulk} className={\"saveBtn\"}>\n            Confirm\n          </CButton>\n        </CCol>\n      </CRow>\n    </div>\n  );\n};\n\nexport default OfficeLocationUpload;\n"]},"metadata":{},"sourceType":"module"}