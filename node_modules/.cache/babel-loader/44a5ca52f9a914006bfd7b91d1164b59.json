{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar JSONDigger = /*#__PURE__*/function () {\n  function JSONDigger(datasource, idProp, childrenProp) {\n    _classCallCheck(this, JSONDigger);\n\n    this.ds = datasource;\n    this.id = idProp;\n    this.children = childrenProp;\n    this.count = 0;\n  }\n\n  _createClass(JSONDigger, [{\n    key: \"countNodes\",\n    value: function countNodes(obj) {\n      var _this = this;\n\n      this.count++;\n\n      if (!obj || !Object.keys(obj).length) {\n        return false;\n      } else {\n        if (obj[this.children]) {\n          obj[this.children].forEach(function (child) {\n            _this.countNodes(child);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"findNodeById\",\n    value: function findNodeById(id) {\n      var _this2 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n\n        function findNodeById(obj, id, callback) {\n          if (!_this.count) {\n            return;\n          }\n\n          if (obj[_this.id] === id) {\n            _this.count = 0;\n            callback(null, obj);\n          } else {\n            if (_this.count === 1) {\n              _this.count = 0;\n              callback('The node doesn\\'t exist.', null);\n            }\n\n            _this.count--;\n\n            if (obj[_this.children]) {\n              obj[_this.children].forEach(function (node) {\n                findNodeById(node, id, callback);\n              });\n            }\n          }\n        }\n\n        findNodeById(_this2.ds, id, function (msg, node) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(node);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"matchConditions\",\n    value: function matchConditions(obj, conditions) {\n      var flag = true;\n      Object.keys(conditions).some(function (item) {\n        if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number' || typeof conditions[item] === 'boolean') {\n          if (obj[item] !== conditions[item]) {\n            flag = false;\n            return true;\n          }\n        } else if (conditions[item] instanceof RegExp) {\n          if (!conditions[item].test(obj[item])) {\n            flag = false;\n            return true;\n          }\n        } else if (typeof conditions[item] === 'object') {\n          Object.keys(conditions[item]).some(function (subitem) {\n            switch (subitem) {\n              case '>':\n                {\n                  if (!(obj[item] > conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '<':\n                {\n                  if (!(obj[item] < conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '>=':\n                {\n                  if (!(obj[item] >= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '<=':\n                {\n                  if (!(obj[item] <= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '!==':\n                {\n                  if (!(obj[item] !== conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n            }\n          });\n\n          if (!flag) {\n            return false;\n          }\n        }\n      });\n      return flag;\n    }\n  }, {\n    key: \"findChildren\",\n    value: function () {\n      var _findChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var _this, parent;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this = this;\n\n                if (id) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('Parameter id is invalid.');\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return this.findParent(id);\n\n              case 6:\n                parent = _context.sent;\n                return _context.abrupt(\"return\", parent[this.children]);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                throw new Error('The child nodes don\\'t exist.');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function findChildren(_x) {\n        return _findChildren.apply(this, arguments);\n      }\n\n      return findChildren;\n    }()\n  }, {\n    key: \"findNodes\",\n    value: function findNodes(conditions) {\n      var _this3 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var nodes, findNodes;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  findNodes = function _findNodes(obj, conditions, callback) {\n                    if (!_this.count) {\n                      return;\n                    }\n\n                    if (_this.matchConditions(obj, conditions)) {\n                      nodes.push(obj);\n\n                      if (_this.count === 1) {\n                        _this.count = 0;\n                        callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                      }\n                    } else {\n                      if (_this.count === 1) {\n                        _this.count = 0;\n                        callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                      }\n                    }\n\n                    _this.count--;\n\n                    if (obj[_this.children]) {\n                      obj[_this.children].forEach(function (child) {\n                        findNodes(child, conditions, callback);\n                      });\n                    }\n                  };\n\n                  if (!(!conditions || !Object.keys(conditions).length)) {\n                    _context2.next = 3;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", reject(new Error('Parameter conditions are invalid.')));\n\n                case 3:\n                  nodes = [];\n                  findNodes(_this3.ds, conditions, function (msg, nodes) {\n                    if (msg) {\n                      reject(new Error(msg));\n                    } else {\n                      resolve(nodes);\n                    }\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(id) {\n      var _this4 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n\n        function findParent(obj, id, callback) {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback('The parent node doesn\\'t exist.', null);\n          } else {\n            _this.count--;\n\n            if (typeof obj[_this.children] !== 'undefined') {\n              obj[_this.children].forEach(function (child) {\n                if (child[_this.id] === id) {\n                  _this.count = 0;\n                  callback(null, obj);\n                }\n              });\n\n              obj[_this.children].forEach(function (child) {\n                findParent(child, id, callback);\n              });\n            }\n          }\n        }\n\n        findParent(_this4.ds, id, function (msg, parent) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(parent);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"findSiblings\",\n    value: function () {\n      var _findSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var _this, parent;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this = this;\n\n                if (id) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error('Parameter id is invalid.');\n\n              case 3:\n                _context3.prev = 3;\n                _context3.next = 6;\n                return this.findParent(id);\n\n              case 6:\n                parent = _context3.sent;\n                return _context3.abrupt(\"return\", parent[this.children].filter(function (child) {\n                  return child[_this.id] !== id;\n                }));\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                throw new Error('The sibling nodes don\\'t exist.');\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 10]]);\n      }));\n\n      function findSiblings(_x4) {\n        return _findSiblings.apply(this, arguments);\n      }\n\n      return findSiblings;\n    }()\n  }, {\n    key: \"findAncestors\",\n    value: function findAncestors(id) {\n      var _this = this;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          var nodes, findAncestors, _findAncestors, ancestors;\n\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _findAncestors = function _findAncestors3() {\n                    _findAncestors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n                      var parent;\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.prev = 0;\n\n                              if (!(id === _this.ds[_this.id])) {\n                                _context4.next = 7;\n                                break;\n                              }\n\n                              if (nodes.length) {\n                                _context4.next = 4;\n                                break;\n                              }\n\n                              throw new Error('The ancestor nodes don\\'t exist.');\n\n                            case 4:\n                              return _context4.abrupt(\"return\", nodes.slice(0));\n\n                            case 7:\n                              _context4.next = 9;\n                              return _this.findParent(id);\n\n                            case 9:\n                              parent = _context4.sent;\n                              nodes.push(parent);\n                              return _context4.abrupt(\"return\", findAncestors(parent[_this.id]));\n\n                            case 12:\n                              _context4.next = 17;\n                              break;\n\n                            case 14:\n                              _context4.prev = 14;\n                              _context4.t0 = _context4[\"catch\"](0);\n                              throw new Error('The ancestor nodes don\\'t exist.');\n\n                            case 17:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4, null, [[0, 14]]);\n                    }));\n                    return _findAncestors.apply(this, arguments);\n                  };\n\n                  findAncestors = function _findAncestors2(_x7) {\n                    return _findAncestors.apply(this, arguments);\n                  };\n\n                  if (id) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", reject(new Error('Parameter id is invalid.')));\n\n                case 4:\n                  nodes = [];\n                  _context5.prev = 5;\n                  _context5.next = 8;\n                  return findAncestors(id);\n\n                case 8:\n                  ancestors = _context5.sent;\n                  resolve(ancestors);\n                  _context5.next = 15;\n                  break;\n\n                case 12:\n                  _context5.prev = 12;\n                  _context5.t0 = _context5[\"catch\"](5);\n                  reject(_context5.t0);\n\n                case 15:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, null, [[5, 12]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    } // validate the input parameters id and data(could be oject or array)\n\n  }, {\n    key: \"validateParams\",\n    value: function validateParams(id, data) {\n      if (!id) {\n        throw new Error('Parameter id is invalid.');\n      }\n\n      if (!data || data.constructor !== Object && data.constructor !== Array || data.constructor === Object && !Object.keys(data).length || data.constructor === Array && !data.length || data.constructor === Array && data.length && !data.every(function (item) {\n        return item && item.constructor === Object && Object.keys(item).length;\n      })) {\n        throw new Error('Parameter data is invalid.');\n      }\n    }\n  }, {\n    key: \"addChildren\",\n    value: function () {\n      var _addChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id, data) {\n        var parent, _parent$this$children;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.validateParams(id, data);\n                _context6.prev = 1;\n                _context6.next = 4;\n                return this.findNodeById(id);\n\n              case 4:\n                parent = _context6.sent;\n\n                if (data.constructor === Object) {\n                  if (parent[this.children]) {\n                    parent[this.children].push(data);\n                  } else {\n                    parent[this.children] = [data];\n                  }\n                } else {\n                  if (parent[this.children]) {\n                    (_parent$this$children = parent[this.children]).push.apply(_parent$this$children, _toConsumableArray(data));\n                  } else {\n                    parent[this.children] = data;\n                  }\n                }\n\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](1);\n                throw new Error('Failed to add child nodes.');\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 8]]);\n      }));\n\n      function addChildren(_x8, _x9) {\n        return _addChildren.apply(this, arguments);\n      }\n\n      return addChildren;\n    }()\n  }, {\n    key: \"addSiblings\",\n    value: function () {\n      var _addSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id, data) {\n        var parent, _parent$this$children2;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.validateParams(id, data);\n                _context7.prev = 1;\n                _context7.next = 4;\n                return this.findParent(id);\n\n              case 4:\n                parent = _context7.sent;\n\n                if (data.constructor === Object) {\n                  parent[this.children].push(data);\n                } else {\n                  (_parent$this$children2 = parent[this.children]).push.apply(_parent$this$children2, _toConsumableArray(data));\n                }\n\n                _context7.next = 11;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](1);\n                throw new Error('Failed to add sibling nodes.');\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[1, 8]]);\n      }));\n\n      function addSiblings(_x10, _x11) {\n        return _addSiblings.apply(this, arguments);\n      }\n\n      return addSiblings;\n    }()\n  }, {\n    key: \"addRoot\",\n    value: function addRoot(data) {\n      var _this5 = this;\n\n      var _this = this;\n\n      if (!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length) {\n        throw new Error('Parameter data is invalid.');\n      }\n\n      try {\n        this.ds[this.children] = [Object.assign({}, this.ds)];\n        delete data[this.children];\n        Object.keys(this.ds).filter(function (prop) {\n          return prop !== _this5.children;\n        }).forEach(function (prop) {\n          if (!data[prop]) {\n            delete _this5.ds[prop];\n          }\n        });\n        Object.assign(this.ds, data);\n      } catch (err) {\n        throw new Error('Failed to add root node.');\n      }\n    }\n  }, {\n    key: \"updateNode\",\n    value: function () {\n      var _updateNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data) {\n        var node;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length || data.constructor === Object && Object.keys(data).length && !data[this.id])) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw new Error('Parameter data is invalid.');\n\n              case 2:\n                _context8.prev = 2;\n                _context8.next = 5;\n                return this.findNodeById(data[this.id]);\n\n              case 5:\n                node = _context8.sent;\n                Object.assign(node, data);\n                _context8.next = 12;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](2);\n                throw new Error('Failed to update node.');\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[2, 9]]);\n      }));\n\n      function updateNode(_x12) {\n        return _updateNode.apply(this, arguments);\n      }\n\n      return updateNode;\n    }()\n  }, {\n    key: \"updateNodes\",\n    value: function () {\n      var _updateNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ids, data) {\n        var _this, _iterator, _step, id;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _this = this;\n\n                if (!(!ids || ids.constructor === Array && !ids.length || !data)) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context9.prev = 3;\n                _iterator = _createForOfIteratorHelper(ids);\n                _context9.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                id = _step.value;\n                data[_this.id] = id;\n                _context9.next = 12;\n                return this.updateNode(data);\n\n              case 12:\n                _context9.next = 7;\n                break;\n\n              case 14:\n                _context9.next = 19;\n                break;\n\n              case 16:\n                _context9.prev = 16;\n                _context9.t0 = _context9[\"catch\"](5);\n\n                _iterator.e(_context9.t0);\n\n              case 19:\n                _context9.prev = 19;\n\n                _iterator.f();\n\n                return _context9.finish(19);\n\n              case 22:\n                _context9.next = 27;\n                break;\n\n              case 24:\n                _context9.prev = 24;\n                _context9.t1 = _context9[\"catch\"](3);\n                throw _context9.t1;\n\n              case 27:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[3, 24], [5, 16, 19, 22]]);\n      }));\n\n      function updateNodes(_x13, _x14) {\n        return _updateNodes.apply(this, arguments);\n      }\n\n      return updateNodes;\n    }() // remove single node based on id\n\n  }, {\n    key: \"removeNode\",\n    value: function () {\n      var _removeNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(id) {\n        var _this, parent, index;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _this = this;\n\n                if (!(id === this.ds[this.id])) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context10.next = 5;\n                return this.findParent(id);\n\n              case 5:\n                parent = _context10.sent;\n                index = parent[this.children].map(function (node) {\n                  return node[_this.id];\n                }).indexOf(id);\n                parent[this.children].splice(index, 1);\n                this.count = 0;\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function removeNode(_x15) {\n        return _removeNode.apply(this, arguments);\n      }\n\n      return removeNode;\n    }() // param could be single id, id array or conditions object\n\n  }, {\n    key: \"removeNodes\",\n    value: function () {\n      var _removeNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(param) {\n        var _this, _iterator2, _step2, p, _nodes, ids, _iterator3, _step3, _p;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _this = this;\n\n                if (!(!param || param.constructor === Array && !param.length || param.constructor === Object && !Object.keys(param).length)) {\n                  _context11.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context11.prev = 3;\n\n                if (!(param.constructor === String || param.constructor === Number)) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                _context11.next = 7;\n                return this.removeNode(param);\n\n              case 7:\n                _context11.next = 50;\n                break;\n\n              case 9:\n                if (!(param.constructor === Array)) {\n                  _context11.next = 29;\n                  break;\n                }\n\n                // if passing in id array\n                _iterator2 = _createForOfIteratorHelper(param);\n                _context11.prev = 11;\n\n                _iterator2.s();\n\n              case 13:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context11.next = 19;\n                  break;\n                }\n\n                p = _step2.value;\n                _context11.next = 17;\n                return this.removeNode(p);\n\n              case 17:\n                _context11.next = 13;\n                break;\n\n              case 19:\n                _context11.next = 24;\n                break;\n\n              case 21:\n                _context11.prev = 21;\n                _context11.t0 = _context11[\"catch\"](11);\n\n                _iterator2.e(_context11.t0);\n\n              case 24:\n                _context11.prev = 24;\n\n                _iterator2.f();\n\n                return _context11.finish(24);\n\n              case 27:\n                _context11.next = 50;\n                break;\n\n              case 29:\n                _context11.next = 31;\n                return this.findNodes(param);\n\n              case 31:\n                _nodes = _context11.sent;\n                ids = _nodes.map(function (node) {\n                  return node[_this.id];\n                });\n                _iterator3 = _createForOfIteratorHelper(ids);\n                _context11.prev = 34;\n\n                _iterator3.s();\n\n              case 36:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context11.next = 42;\n                  break;\n                }\n\n                _p = _step3.value;\n                _context11.next = 40;\n                return this.removeNode(_p);\n\n              case 40:\n                _context11.next = 36;\n                break;\n\n              case 42:\n                _context11.next = 47;\n                break;\n\n              case 44:\n                _context11.prev = 44;\n                _context11.t1 = _context11[\"catch\"](34);\n\n                _iterator3.e(_context11.t1);\n\n              case 47:\n                _context11.prev = 47;\n\n                _iterator3.f();\n\n                return _context11.finish(47);\n\n              case 50:\n                _context11.next = 55;\n                break;\n\n              case 52:\n                _context11.prev = 52;\n                _context11.t2 = _context11[\"catch\"](3);\n                throw new Error('Failed to remove nodes.');\n\n              case 55:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[3, 52], [11, 21, 24, 27], [34, 44, 47, 50]]);\n      }));\n\n      function removeNodes(_x16) {\n        return _removeNodes.apply(this, arguments);\n      }\n\n      return removeNodes;\n    }()\n  }]);\n\n  return JSONDigger;\n}();\n\nexports.default = JSONDigger;\n;","map":{"version":3,"sources":["../src/index.js"],"names":["constructor","_this","Object","obj","child","reject","callback","node","findNodeById","resolve","flag","item","conditions","subitem","parent","nodes","findNodes","findParent","id","findAncestors","ancestors","data","prop","ids","index","param"],"mappings":"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","sourcesContent":["export default class JSONDigger {\n  constructor(datasource, idProp, childrenProp) {\n    this.ds = datasource;\n    this.id = idProp;\n    this.children = childrenProp;\n    this.count = 0;\n  }\n\n  countNodes (obj) {\n    var _this = this;\n    this.count++;\n    if (!obj || !Object.keys(obj).length) {\n      return false;\n    } else {\n      if (obj[this.children]) {\n        obj[this.children].forEach(child => {\n          _this.countNodes(child);\n        });\n      }\n    }\n  }\n\n  findNodeById (id) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise((resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      function findNodeById (obj, id, callback) {\n        if (!_this.count) {\n          return;\n        }\n        if (obj[_this.id] === id) {\n          _this.count = 0;\n          callback(null, obj);\n        } else {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback('The node doesn\\'t exist.', null);\n          }\n          _this.count--;\n          if (obj[_this.children]) {\n            obj[_this.children].forEach(node => {\n              findNodeById(node, id, callback);\n            });\n          }\n        }\n      }\n      findNodeById(this.ds, id, (msg, node) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(node);\n        }\n      });\n    });\n  }\n\n  matchConditions (obj, conditions) {\n    var flag = true;\n    Object.keys(conditions).some(item => {\n      if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number' || typeof conditions[item] === 'boolean') {\n        if (obj[item] !== conditions[item]) {\n          flag = false;\n          return true;\n        }\n      } else if (conditions[item] instanceof RegExp) {\n        if (!conditions[item].test(obj[item])) {\n          flag = false;\n          return true;\n        }\n      } else if (typeof conditions[item] === 'object') {\n        Object.keys(conditions[item]).some(subitem => {\n          switch (subitem) {\n            case '>': {\n              if (!(obj[item] > conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '<': {\n              if (!(obj[item] < conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '>=': {\n              if (!(obj[item] >= conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '<=': {\n              if (!(obj[item] <= conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '!==': {\n              if (!(obj[item] !== conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n          }\n        });\n        if (!flag) {\n          return false;\n        }\n      }\n    });\n\n    return flag;\n  }\n\n  async findChildren (id) {\n    const _this = this;\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    try {\n      const parent = await this.findParent(id);\n      return parent[this.children];\n    } catch (err) {\n      throw new Error('The child nodes don\\'t exist.');\n    }\n  }\n\n  findNodes (conditions) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise(async(resolve, reject) => {\n      if (!conditions || !Object.keys(conditions).length) {\n        return reject(new Error('Parameter conditions are invalid.'));\n      }\n      let nodes = [];\n      function findNodes(obj, conditions, callback) {\n        if (!_this.count) {\n          return;\n        }\n        if (_this.matchConditions(obj, conditions)) {\n          nodes.push(obj);\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n          }\n        } else {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n          }\n        }\n        _this.count--;\n        if (obj[_this.children]) {\n          obj[_this.children].forEach(child => {\n            findNodes(child, conditions, callback);\n          });\n        }\n      }\n      findNodes(this.ds, conditions, (msg, nodes) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(nodes);\n        }\n      });\n    });\n  }\n\n  findParent (id) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise((resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      function findParent (obj, id, callback)  {\n        if (_this.count === 1) {\n          _this.count = 0;\n          callback('The parent node doesn\\'t exist.', null);\n        } else {\n          _this.count--;\n          if (typeof obj[_this.children] !== 'undefined') {\n            obj[_this.children].forEach(function(child) {\n              if (child[_this.id] === id) {\n                _this.count = 0;\n                callback(null, obj);\n              }\n            });\n            obj[_this.children].forEach(function(child) {\n              findParent(child, id, callback);\n            });\n          }\n        }\n      }\n      findParent(this.ds, id, (msg, parent) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(parent);\n        }\n      });\n    });\n  }\n\n  async findSiblings (id) {\n    const _this = this;\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    try {\n      const parent = await this.findParent(id);\n      return parent[this.children].filter(child => {\n        return child[_this.id] !== id;\n      });\n    } catch (err) {\n      throw new Error('The sibling nodes don\\'t exist.');\n    }\n  }\n\n  findAncestors (id) {\n    const _this = this;\n    return new Promise(async(resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      let  nodes = [];\n      async function findAncestors (id) {\n        try {\n          if (id === _this.ds[_this.id]) {\n            if (!nodes.length) {\n              throw new Error('The ancestor nodes don\\'t exist.');\n            }\n            return nodes.slice(0);\n          } else {\n            const parent = await _this.findParent(id);\n            nodes.push(parent);\n            return findAncestors(parent[_this.id]);\n          }\n        } catch (err) {\n          throw new Error('The ancestor nodes don\\'t exist.');\n        }\n      }\n      try {\n        const ancestors = await findAncestors(id);\n        resolve(ancestors);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  // validate the input parameters id and data(could be oject or array)\n  validateParams(id, data) {\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    if (!data\n      || (data.constructor !== Object && data.constructor !== Array)\n      || (data.constructor === Object && !Object.keys(data).length)\n      || (data.constructor === Array && !data.length)\n      || (data.constructor === Array && data.length && !data.every(item => item && item.constructor === Object && Object.keys(item).length))) {\n      throw new Error('Parameter data is invalid.');\n    }\n  }\n\n  async addChildren (id, data) {\n    this.validateParams(id, data);\n    try {\n      const parent = await this.findNodeById(id);\n      if (data.constructor === Object) {\n        if (parent[this.children]) {\n          parent[this.children].push(data);\n        } else {\n          parent[this.children] = [data];\n        }\n      } else {\n        if (parent[this.children]) {\n          parent[this.children].push(...data);\n        } else {\n          parent[this.children] = data;\n        }\n      }\n    } catch (err) {\n      throw new Error('Failed to add child nodes.');\n    }\n  }\n\n  async addSiblings (id, data) {\n    this.validateParams(id, data);\n    try {\n      const parent = await this.findParent(id);\n      if (data.constructor === Object) {\n        parent[this.children].push(data);\n      } else {\n        parent[this.children].push(...data);\n      }\n    } catch (err) {\n      throw new Error('Failed to add sibling nodes.');\n    }\n  }\n\n  addRoot (data) {\n    const _this = this;\n    if (!data || data.constructor !== Object || (data.constructor === Object && !Object.keys(data).length)) {\n      throw new Error('Parameter data is invalid.');\n    }\n    try {\n      this.ds[this.children] = [Object.assign({}, this.ds)];\n      delete data[this.children];\n      Object.keys(this.ds).filter(prop => prop !== this.children).forEach(prop => {\n        if (!data[prop]) {\n          delete this.ds[prop];\n        }\n      });\n      Object.assign(this.ds, data);\n    } catch (err) {\n      throw new Error('Failed to add root node.');\n    }\n  }\n\n  async updateNode (data) {\n    if (!data\n      || data.constructor !== Object\n      || (data.constructor === Object && !Object.keys(data).length)\n      || (data.constructor === Object && Object.keys(data).length && !data[this.id])) {\n      throw new Error('Parameter data is invalid.');\n    }\n    try {\n      const node = await this.findNodeById(data[this.id]);\n      Object.assign(node, data);\n    } catch (err) {\n      throw new Error('Failed to update node.');\n    }\n  }\n\n  async updateNodes (ids, data) {\n    const _this = this;\n    if (!ids\n      || (ids.constructor === Array && !ids.length)\n      || !data) {\n      throw new Error('Input parameter is invalid.');\n    }\n    try {\n      for (const id of ids) {\n        data[_this.id] = id; \n        await this.updateNode(data);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // remove single node based on id\n  async removeNode (id) {\n    const _this = this;\n    if (id === this.ds[this.id]) {\n      throw new Error('Input parameter is invalid.');\n    }\n    const parent = await this.findParent(id);\n    const index = parent[this.children].map(node => node[_this.id]).indexOf(id);\n    parent[this.children].splice(index, 1);\n    this.count = 0;\n  }\n\n  // param could be single id, id array or conditions object\n  async removeNodes (param) {\n    const _this = this;\n    if (!param\n      || (param.constructor === Array && !param.length)\n      || (param.constructor === Object && !Object.keys(param).length)) {\n      throw new Error('Input parameter is invalid.');\n    }\n    try {\n      // if passing in single id\n      if (param.constructor === String || param.constructor === Number) {\n        await this.removeNode(param);\n      } else if (param.constructor === Array) { // if passing in id array\n        for (const p of param) {\n          await this.removeNode(p);\n        }\n      } else { // if passing in conditions object\n        const nodes = await this.findNodes(param);\n        const ids = nodes.map(node => node[_this.id]);\n        for (const p of ids) {\n          await this.removeNode(p);\n        }\n      }\n    } catch (err) {\n      throw new Error('Failed to remove nodes.');\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}