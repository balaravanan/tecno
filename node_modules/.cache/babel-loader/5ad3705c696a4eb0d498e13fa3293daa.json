{"ast":null,"code":"import _regeneratorRuntime from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kpost/Desktop/Political_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/kpost/Desktop/Political_UI/src/services/auth/AuthContext.js\";\nimport React from 'react';\nimport { isEmail } from 'validator';\nimport { getUser, signIn, signUp, verify as _verify } from '../ApiService';\nimport * as validator from 'validator';\nvar AuthContext = React.createContext();\n\nvar AuthProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(AuthProvider, _React$Component);\n\n  var _super = _createSuper(AuthProvider);\n\n  _createClass(AuthProvider, [{\n    key: \"componentDidMount\",\n    // token=localStorage.getItem('token');\n    // true }//\n    value: function componentDidMount() {\n      // const token = localStorage.getItem('token')\n      // console.log(\"Auth token\",token)\n      // if (token !== \"null\"){\n      //     console.log('token exists')\n      //     this.setState({isAuth : true})\n      // }\n      this.checkToken();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.children !== this.props.children) {\n        this.checkToken();\n      }\n    }\n  }]);\n\n  function AuthProvider(props) {\n    var _this;\n\n    _classCallCheck(this, AuthProvider);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isAuth: localStorage.getItem('token') !== null\n    };\n    _this.login = _this.login.bind(_assertThisInitialized(_this));\n    _this.signup = _this.signup.bind(_assertThisInitialized(_this)); // this.createOfficeLocation = this.createOfficeLocation.bind(this)\n    // this.addPosting = this.addPosting.bind(this)\n    // this.addExperienceDetails = this.addExperienceDetails.bind(this)\n    // this.suspendEmployee = this.suspendEmployee.bind(this)\n    // this.addTransferEmployee = this.addTransferEmployee.bind(this)\n    // this.promoteEmployee = this.promoteEmployee.bind(this)\n    // this.addPromoteEmployee = this.addPromoteEmployee.bind(this)\n    // this.viewSuspendEmployee = this.viewSuspendEmployee.bind(this)\n\n    return _this;\n  }\n\n  _createClass(AuthProvider, [{\n    key: \"checkToken\",\n    value: function () {\n      var _checkToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return getUser();\n\n              case 3:\n                user = _context.sent;\n\n                if (user.success) {\n                  console.log(\"setting auth true\");\n                  this.setState({\n                    isAuth: true\n                  });\n                }\n\n                _context.next = 12;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('Auth Context Unauthorized');\n                console.log(_context.t0.message);\n                this.logout();\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function checkToken() {\n        return _checkToken.apply(this, arguments);\n      }\n\n      return checkToken;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, password) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!validator.isEmail(email) && !validator.isMobilePhone(email))) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('Please enter a valid email / phone number.');\n\n              case 2:\n                if (password) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('Please enter a password.');\n\n              case 4:\n                console.log('Email', email);\n                _context2.prev = 5;\n                _context2.next = 8;\n                return signIn(email, password);\n\n              case 8:\n                result = _context2.sent;\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](5);\n                console.log(_context2.t0.message);\n                throw _context2.t0;\n\n              case 15:\n                if (!result.success) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                console.log(\"sign in auth response\", result);\n                this.setState({\n                  isAuth: true\n                });\n                sessionStorage.setItem('userId', result.user._id);\n                localStorage.setItem('userId', result.user._id);\n                localStorage.setItem('token', result.token);\n                return _context2.abrupt(\"return\", {\n                  success: true,\n                  token: result.token,\n                  user: result.user\n                });\n\n              case 22:\n                this.setState({\n                  isAuth: false\n                });\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 11]]);\n      }));\n\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"signup\",\n    value: function () {\n      var _signup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name, email, password) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (isEmail(email)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Please enter a valid email');\n\n              case 2:\n                if (!(password !== 'undefined')) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                if (!(password.length < 8 // !password.match(\n                //     /^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).*$/,\n                // )\n                )) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('Please enter a password of min 8 characters.');\n\n              case 5:\n                _context3.prev = 5;\n                _context3.next = 8;\n                return signUp(name, email, password);\n\n              case 8:\n                result = _context3.sent;\n                _context3.next = 15;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](5);\n                console.log(_context3.t0.message);\n                throw _context3.t0;\n\n              case 15:\n                if (!result.success) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  success: true,\n                  user: result.user\n                });\n\n              case 17:\n                this.setState({\n                  isAuth: false\n                });\n                return _context3.abrupt(\"return\", false);\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 11]]);\n      }));\n\n      function signup(_x3, _x4, _x5) {\n        return _signup.apply(this, arguments);\n      }\n\n      return signup;\n    }()\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(email, code) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (isEmail(email)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('No email id to verify.');\n\n              case 2:\n                if (!(code === 'undefined')) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('Please enter a verification code.');\n\n              case 4:\n                _context4.prev = 4;\n                _context4.next = 7;\n                return _verify(email, code);\n\n              case 7:\n                result = _context4.sent;\n                _context4.next = 14;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n                console.log(_context4.t0.message);\n                throw _context4.t0;\n\n              case 14:\n                if (!result.success) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", result);\n\n              case 16:\n                return _context4.abrupt(\"return\", false);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[4, 10]]);\n      }));\n\n      function verify(_x6, _x7) {\n        return _verify2.apply(this, arguments);\n      }\n\n      return verify;\n    }() // async createOfficeLocation(name, type, adress, adress1, country, state, dist, area, pincode) {\n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter office type')\n    //     }\n    //     if (adress !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (adress1 !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (country !== 'undefined') {\n    //         throw new Error('Please enter Country')\n    //     }\n    //     if (state !== 'undefined') {\n    //         throw new Error('Please state')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please enter District')\n    //     }\n    //     if (area !== 'undefined') {\n    //         throw new Error('Please enter Area')\n    //     }\n    //     if (pincode !== 'undefined') {\n    //         throw new Error('Please enter Pincode')\n    //     }\n    //     let result\n    //     try {\n    //         result = await createOfficeLocation(name, type, adress, adress1, country, state, dist, area, pincode)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async addPosting( name, type, location, circle, division, department, dist, role) {\n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter office type')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (circle !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (division !== 'undefined') {\n    //         throw new Error('Please enter Country')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please state')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please enter District')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter Area')\n    //     }\n    //     let result\n    //     try {\n    //         result = await addPosting(name, type, location, circle, division, department, dist, role)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async addExperienceDetails(employee, name, type, location, circle, division, department, dist, role) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter Company name')\n    //     }\n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter Department type')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (circle !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (division !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please joining date')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please Relevin Date')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please Experience')\n    //     }\n    //     let result\n    //     try {\n    //         result = await addExperienceDetails(employee, name, type, location, circle, division, department, dist, role)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async suspendEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, desigination2, from, desigination3, to, description1) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (desigination2 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (from !== 'undefined') {\n    //         throw new Error('Please enter Suspend From')\n    //     }\n    //     if (desigination3 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (to !== 'undefined') {\n    //         throw new Error('Please enter Suspend To')\n    //     }\n    //     if (description1 !== 'undefined') {\n    //         throw new Error('Please enter Description')\n    //     }\n    //     let result\n    //     try {\n    //         result = await suspendEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, desigination2, from, desigination3, to, description1)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async addTransferEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, vacancy) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (vacancy !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     let result\n    //     try {\n    //         result = await addTransferEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, vacancy)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async transferEmployeeList(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     let result\n    //     try {\n    //         result = await transferEmployeeList(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async promoteEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     let result\n    //     try {\n    //         result = await promoteEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async addPromoteEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, vacancy) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (vacancy !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     let result\n    //     try {\n    //         result = await addPromoteEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, vacancy)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async viewSuspendEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     let result\n    //     try {\n    //         result = await viewSuspendEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this.setState({\n        isAuth: false\n      }); // localStorage.setItem('token', null)\n\n      localStorage.removeItem('token');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n        value: {\n          isAuth: this.state.isAuth,\n          login: this.login,\n          signup: this.signup,\n          // createOfficeLocation: this.createOfficeLocation,\n          // addPosting: this.addPosting,\n          // addExperienceDetails: this.addExperienceDetails,\n          // suspendEmployee: this.suspendEmployee,\n          // addTransferEmployee: this.addTransferEmployee,\n          // transferEmployee: this.transferEmployee,\n          // promoteEmployee: this.promoteEmployee,\n          // addPromoteEmployee: this.addPromoteEmployee,\n          // viewSuspendEmployee: this.viewSuspendEmployee,\n          verify: this.verify,\n          approval: this.approval,\n          logout: this.logout\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return AuthProvider;\n}(React.Component);\n\nString.prototype.capitalize = function () {\n  var text = this.toLowerCase();\n  return text.replace(/(^|\\s)([a-z])/g, function (m, p1, p2) {\n    return p1 + p2.toUpperCase();\n  });\n};\n\nvar AuthConsumer = AuthContext.Consumer;\nexport { AuthContext, AuthProvider, AuthConsumer };","map":{"version":3,"sources":["/home/kpost/Desktop/Political_UI/src/services/auth/AuthContext.js"],"names":["React","isEmail","getUser","signIn","signUp","verify","validator","AuthContext","createContext","AuthProvider","checkToken","nextProps","children","props","state","isAuth","localStorage","getItem","login","bind","signup","user","success","console","log","setState","message","logout","email","password","isMobilePhone","Error","result","sessionStorage","setItem","_id","token","name","length","code","removeItem","approval","Component","String","prototype","capitalize","text","toLowerCase","replace","m","p1","p2","toUpperCase","AuthConsumer","Consumer"],"mappings":"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,EAAE;AAAV,iBAAd;kDACO,K;;;;;;;;;;;;;;;;;;;gGAGEa,K,EAAOW,I;;;;;;oBACXtC,OAAO,CAAC2B,KAAD,C;;;;;sBACF,IAAIG,KAAJ,CAAU,wBAAV,C;;;sBAGNQ,IAAI,KAAK,W;;;;;sBACH,IAAIR,KAAJ,CAAU,mCAAV,C;;;;;uBAKS1B,OAAM,CAACuB,KAAD,EAAQW,IAAR,C;;;AAArBP,gBAAAA,M;;;;;;;AAEAT,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAEE,OAAd;;;;qBAIAM,MAAM,CAACV,O;;;;;kDACAU,M;;;kDAEJ,K;;;;;;;;;;;;;;;QAGX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAES;AACL,WAAKP,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAAE;AAAV,OAAd,EADK,CAEL;;AACAC,MAAAA,YAAY,CAACwB,UAAb,CAAwB,OAAxB;AACH;;;6BAEQ;AACL,0BACI,oBAAC,WAAD,CAAa,QAAb;AACI,QAAA,KAAK,EAAE;AACHzB,UAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MADhB;AAEHG,UAAAA,KAAK,EAAE,KAAKA,KAFT;AAGHE,UAAAA,MAAM,EAAE,KAAKA,MAHV;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIAf,UAAAA,MAAM,EAAE,KAAKA,MAhBV;AAiBHoC,UAAAA,QAAQ,EAAE,KAAKA,QAjBZ;AAkBHd,UAAAA,MAAM,EAAE,KAAKA;AAlBV,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAsBK,KAAKd,KAAL,CAAWD,QAtBhB,CADJ;AA0BH;;;;EApmBsBZ,KAAK,CAAC0C,S;;AAumBjCC,MAAM,CAACC,SAAP,CAAiBC,UAAjB,GAA8B,YAAY;AACtC,MAAMC,IAAI,GAAG,KAAKC,WAAL,EAAb;AACA,SAAOD,IAAI,CAACE,OAAL,CAAa,gBAAb,EAA+B,UAAUC,CAAV,EAAaC,EAAb,EAAiBC,EAAjB,EAAqB;AACvD,WAAOD,EAAE,GAAGC,EAAE,CAACC,WAAH,EAAZ;AACH,GAFM,CAAP;AAGH,CALD;;AAOA,IAAMC,YAAY,GAAG9C,WAAW,CAAC+C,QAAjC;AACA,SAAS/C,WAAT,EAAsBE,YAAtB,EAAoC4C,YAApC","sourcesContent":["import React from 'react'\nimport { isEmail } from 'validator'\nimport {\n    getUser, signIn, signUp, verify\n} from '../ApiService'\nimport * as validator from 'validator';\n\nconst AuthContext = React.createContext()\n\nclass AuthProvider extends React.Component {\n    // token=localStorage.getItem('token');\n\n    state = { isAuth: localStorage.getItem('token') !== null } // true }//\n\n    componentDidMount() {\n        // const token = localStorage.getItem('token')\n        // console.log(\"Auth token\",token)\n        // if (token !== \"null\"){\n        //     console.log('token exists')\n        //     this.setState({isAuth : true})\n        // }\n\n        this.checkToken()\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.children !== this.props.children) {\n            this.checkToken()\n        }\n    }\n\n    constructor(props) {\n        super(props)\n        this.login = this.login.bind(this)\n        this.signup = this.signup.bind(this)\n        // this.createOfficeLocation = this.createOfficeLocation.bind(this)\n        // this.addPosting = this.addPosting.bind(this)\n        // this.addExperienceDetails = this.addExperienceDetails.bind(this)\n        // this.suspendEmployee = this.suspendEmployee.bind(this)\n        // this.addTransferEmployee = this.addTransferEmployee.bind(this)\n        // this.promoteEmployee = this.promoteEmployee.bind(this)\n        // this.addPromoteEmployee = this.addPromoteEmployee.bind(this)\n        // this.viewSuspendEmployee = this.viewSuspendEmployee.bind(this)\n\n        \n        \n    }\n\n    async checkToken() {\n\n        var user;\n        // var result;\n        try {\n            user = await getUser()\n\n            if (user.success) {\n                console.log(\"setting auth true\");\n                this.setState({ isAuth: true })\n            }\n\n        } catch (e) {\n            console.log('Auth Context Unauthorized');\n            console.log(e.message)\n            this.logout()\n        }\n\n    }\n\n    async login(email, password) {\n\n        if (!validator.isEmail(email) && !validator.isMobilePhone(email)) {\n            throw new Error('Please enter a valid email / phone number.');\n        }\n\n        // if (!isEmail(email)) {\n        //     throw new Error('Please enter a valid email id.')\n        // }\n\n        if (!password) {\n            throw new Error('Please enter a password.')\n        }\n\n        console.log('Email', email)\n\n        let result\n        try {\n            result = await signIn(email, password)\n        } catch (e) {\n            console.log(e.message)\n            throw e\n        }\n\n        if (result.success) {\n            console.log(\"sign in auth response\", result)\n            this.setState({ isAuth: true })\n            sessionStorage.setItem('userId', result.user._id)\n            localStorage.setItem('userId', result.user._id)\n            localStorage.setItem('token', result.token)\n\n            return {\n                success: true,\n                token: result.token,\n                user: result.user,\n            }\n        }\n        this.setState({ isAuth: false })\n\n    }\n\n    async signup(name, email, password) {\n        if (!isEmail(email)) {\n            throw new Error('Please enter a valid email')\n        }\n\n        if (password !== 'undefined') {\n            if (\n                password.length < 8\n                // !password.match(\n                //     /^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).*$/,\n                // )\n            ) {\n                throw new Error('Please enter a password of min 8 characters.')\n            }\n        }\n\n        let result\n        try {\n            result = await signUp(name, email, password)\n        } catch (e) {\n            console.log(e.message)\n            throw e\n        }\n\n        if (result.success) {\n            return ({ success: true, user: result.user })\n        }\n        this.setState({ isAuth: false })\n        return false\n    }\n\n    async verify(email, code) {\n        if (!isEmail(email)) {\n            throw new Error('No email id to verify.')\n        }\n\n        if (code === 'undefined') {\n            throw new Error('Please enter a verification code.')\n        }\n\n        let result\n        try {\n            result = await verify(email, code)\n        } catch (e) {\n            console.log(e.message)\n            throw e\n        }\n\n        if (result.success) {\n            return result\n        }\n        return false\n    }\n\n    // async createOfficeLocation(name, type, adress, adress1, country, state, dist, area, pincode) {\n\n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter office type')\n    //     }\n    //     if (adress !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (adress1 !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (country !== 'undefined') {\n    //         throw new Error('Please enter Country')\n    //     }\n    //     if (state !== 'undefined') {\n    //         throw new Error('Please state')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please enter District')\n    //     }\n    //     if (area !== 'undefined') {\n    //         throw new Error('Please enter Area')\n    //     }\n    //     if (pincode !== 'undefined') {\n    //         throw new Error('Please enter Pincode')\n    //     }\n\n    //     let result\n    //     try {\n    //         result = await createOfficeLocation(name, type, adress, adress1, country, state, dist, area, pincode)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async addPosting( name, type, location, circle, division, department, dist, role) {\n       \n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter office type')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (circle !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (division !== 'undefined') {\n    //         throw new Error('Please enter Country')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please state')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please enter District')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter Area')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await addPosting(name, type, location, circle, division, department, dist, role)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async addExperienceDetails(employee, name, type, location, circle, division, department, dist, role) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter Company name')\n    //     }\n    //     if (name !== 'undefined') {\n    //         throw new Error('Please enter office name')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter Department type')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (circle !== 'undefined') {\n    //         throw new Error('Please enter Address')\n    //     }\n    //     if (division !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please joining date')\n    //     }\n    //     if (dist !== 'undefined') {\n    //         throw new Error('Please Relevin Date')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please Experience')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await addExperienceDetails(employee, name, type, location, circle, division, department, dist, role)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async suspendEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, desigination2, from, desigination3, to, description1) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (desigination2 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (from !== 'undefined') {\n    //         throw new Error('Please enter Suspend From')\n    //     }\n    //     if (desigination3 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (to !== 'undefined') {\n    //         throw new Error('Please enter Suspend To')\n    //     }\n    //     if (description1 !== 'undefined') {\n    //         throw new Error('Please enter Description')\n    //     }\n\n    //     let result\n    //     try {\n    //         result = await suspendEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, desigination2, from, desigination3, to, description1)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async addTransferEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, vacancy) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (vacancy !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await addTransferEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, vacancy)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async transferEmployeeList(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await transferEmployeeList(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async promoteEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await promoteEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n    // async addPromoteEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location, vacancy) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n    //     if (vacancy !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await addPromoteEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location, vacancy)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    // async viewSuspendEmployee(employee, office, description, department, Id,\n    //     desigination1, type, role, location,) {\n    //     if (employee !== 'undefined') {\n    //         throw new Error('Please enter employee')\n    //     }\n    //     if (office !== 'undefined') {\n    //         throw new Error('Please enter office')\n    //     }\n    //     if (description !== 'undefined') {\n    //         throw new Error('Please enter description')\n    //     }\n    //     if (department !== 'undefined') {\n    //         throw new Error('Please enter department')\n    //     }\n    //     if (Id !== 'undefined') {\n    //         throw new Error('Please enter Id')\n    //     }\n    //     if (desigination1 !== 'undefined') {\n    //         throw new Error('Please enter Desigination')\n    //     }\n    //     if (type !== 'undefined') {\n    //         throw new Error('Please enter type')\n    //     }\n    //     if (role !== 'undefined') {\n    //         throw new Error('Please enter role')\n    //     }\n    //     if (location !== 'undefined') {\n    //         throw new Error('Please enter location')\n    //     }\n\n\n    //     let result\n    //     try {\n    //         result = await viewSuspendEmployee(employee, office, description, department, Id,\n    //             desigination1, type, role, location)\n    //     } catch (e) {\n    //         console.log(e.message)\n    //         throw e\n    //     }\n    //     if (result.success) {\n    //         return ({ success: true, user: result.user })\n    //     }\n    //     this.setState({ isAuth: false })\n    //     return false\n    // }\n\n    logout() {\n        this.setState({ isAuth: false })\n        // localStorage.setItem('token', null)\n        localStorage.removeItem('token')\n    }\n\n    render() {\n        return (\n            <AuthContext.Provider\n                value={{\n                    isAuth: this.state.isAuth,\n                    login: this.login,\n                    signup: this.signup,\n                    // createOfficeLocation: this.createOfficeLocation,\n                    // addPosting: this.addPosting,\n                    // addExperienceDetails: this.addExperienceDetails,\n                    // suspendEmployee: this.suspendEmployee,\n                    // addTransferEmployee: this.addTransferEmployee,\n                    // transferEmployee: this.transferEmployee,\n                    // promoteEmployee: this.promoteEmployee,\n                    // addPromoteEmployee: this.addPromoteEmployee,\n                    // viewSuspendEmployee: this.viewSuspendEmployee,\n\n                    \n                    \n                    verify: this.verify,\n                    approval: this.approval,\n                    logout: this.logout,\n                }}\n            >\n                {this.props.children}\n            </AuthContext.Provider>\n        )\n    }\n}\n\nString.prototype.capitalize = function () {\n    const text = this.toLowerCase()\n    return text.replace(/(^|\\s)([a-z])/g, function (m, p1, p2) {\n        return p1 + p2.toUpperCase()\n    })\n}\n\nconst AuthConsumer = AuthContext.Consumer\nexport { AuthContext, AuthProvider, AuthConsumer }\n"]},"metadata":{},"sourceType":"module"}